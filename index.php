<?php
/**
 * Created by PhpStorm.
 * User: evolution
 * Date: 17-5-18
 * Time: 下午2:45
 */

class data extends Thread {
    public $queue=[];
    public $tick;

    public function run()
    {
        parent::run(); // TODO: Change the autogenerated stub
    }

    public function add()
    {
        $this->tick++;
        $this->queue[$this->tick] = $this->tick;
    }

    public function del()
    {
        $this->tick--;
        unset($this->queue[$this->tick]);
    }
}

class GlobalWheel extends Thread {
    public $queue;
    public $tick;
    public $data;

    public function __construct($data)
    {
        $this->data = $data;
    }

    public function del()
    {
        $this->data->tick--;
    }

    public function add()
    {
        $this->data->add();
    }

    public function show($id)
    {
        echo "\n threadid is {$id}\n　tick=".$this->data->tick."\r\n";
        print_r($this->data->queue);
    }

    function run(){
        try{
            while (1){
                $this->synchronized(function($thread){
                    $this->del();
                    $this->show(Thread::getCurrentThreadId());
                }, $this);
//                sleep(1);
            }
        } catch (\Exception $e) {
            echo $e->getMessage();
        }finally{
            echo "end\n";
        }
    }
}


class GlobalWheel2 extends Thread {
    public function __construct($data)
    {
        $this->data = $data;
    }

    public function del()
    {
    }

    public function add()
    {
        $this->data->add();
    }

    public function show($id)
    {
        echo "\n threadid is {$id}\n　tick=".$this->data->tick."\r\n";
        print_r($this->data->queue);
    }

    function run(){
        try{
            while (1){
                $this->synchronized(function($thread){
                    $this->add();
                    $this->show(Thread::getCurrentThreadId());
                }, $this);
//                sleep(1);
            }
        } catch (\Exception $e) {
            echo $e->getMessage();
        }finally{
            echo "end\n";
        }
    }
}

//通过继承Thread类来实现自己的线程类MyThread
class MyThread extends Thread{
    private $glo;

    //重写构造函数
    function __construct(&$glo){
        $this->glo = $glo;
    }
    //重写run方法（运行的是子线程需要执行的任务）
    function run(){
        try{
            while (1){
                $this->glo->add();
                $this->glo->show(Thread::getCurrentThreadId());
                sleep(1);
            }
        } catch (\Exception $e) {
            echo $e->getMessage();
        }finally{
            echo "end\n";
        }
    }
}

class MyThread2 extends Thread{
    private $w;
    public $glo;

    //重写构造函数
    function __construct(&$glo){
        $this->glo = $glo;
    }
    //重写run方法（运行的是子线程需要执行的任务）
    function run(){
        try{
            while (1){
                $this->glo->add();
                $this->glo->show(Thread::getCurrentThreadId());
                sleep(1);
            }
        } catch (\Exception $e) {
            echo $e->getMessage();
        }finally{
            echo "end\n";
        }
    }
}


$dataObj = new data();
$wheelObj = new GlobalWheel($dataObj);
$wheelObj2 = new GlobalWheel2($dataObj);

$wheelObj->start();
$wheelObj2->start();
//$wheelObj2->join();
//$t2->start();




